@page "/checkout"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MyCheeseShop.Components.Shared
@using MyCheeseShop.Context
@using MyCheeseShop.Model
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

@inject OrderProvider OrderProvider
@inject UserProvider UserProvider
@inject ShoppingCart ShoppingCart
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore
@inject AuthenticationStateProvider AuthenticationStateProvider




<h3>Checkout</h3>

<div class="card mb-4">
    <div class="card-body bg-light-yellow">
        <h4 class="card-title">Order Summary</h4>
        <CartSummary />
    </div>
</div>

<EditForm EditContext="editContext" OnValidSubmit="MakePayment">
    <DataAnnotationsValidator />

    <div class="card h-100 shadow rounded mb-4">
        <div class="card-body bg-light-yellow">
            <div class="row g-3">
                <div class="col-md-6">
                    <label for="name" class="form-label">Name</label>
                    <Input class="form-control" placeholder="Name" Value="@GetFormattedName(user)" disabled />
                </div>
                <div class="col-md-6">
                    <label for="address" class="form-label">Address</label>
                    <Input class="form-control" placeholder="Address" Value="@GetFormattedAddress(user)" disabled />
                </div>
                <div class="col-md-5">
                    <label for="email" class="form-label">Email</label>
                    <Input class="form-control" placeholder="Email" Value="@user.Email" disabled />
                </div>
            </div>
        </div>
    </div>

    <form class="credit-card">
        <div class="card h-100 shadow rounded mb-4">
            <div class="card-body bg-light-yellow">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="nameOnCard" class="form-label">Name</label>
                        <InputText class="form-control" id="nameOnCard" placeholder="First and Last name.." @bind-Value="paymentDetails.NameOnCard"></InputText>
                    </div>
                    <div class="col-md-6">
                        <label for="cardNumber" class="form-label">Card Number</label>
                        <InputText class="form-control" id="cardNumber" placeholder="0000-0000-0000-0000" @bind-Value="paymentDetails.CardNumber"></InputText>
                    </div>
                    <div class="col-md-5">
                        <label for="expiryDate" class="form-label">Expiry Date</label>
                        <InputText class="form-control" id="expiryDate" placeholder="MM/YY" @bind-Value="paymentDetails.ExpiryDate"></InputText>
                    </div>
                    <div class="col-md-3">
                        <label for="securityCode" class="form-label">Security Code</label>
                        <InputText class="form-control" id="securityCode" placeholder="CVV" @bind-Value="paymentDetails.SecurityCode"></InputText>
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary w-100">Pay</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
</EditForm>

<link href='https://fonts.googleapis.com/css?family=Roboto:400,300,100' rel='stylesheet' type='text/css'>
<link rel="stylesheet" href="CheckoutPage.css">


@code {
    private PaymentDetails paymentDetails;
    private User user;
    private bool isPaying;
    private EditContext editContext;

    private sealed class PaymentDetails
    {
        [Required]
        public string NameOnCard { get; set; }

        [Required]
        public string CardNumber { get; set; }

        [Required]
        public string ExpiryDate { get; set; }

        [Required]
        public string SecurityCode { get; set; }
    }

    private async Task MakePayment()
    {
        await StimulatePayment();

        await OrderProvider.CreateOrder(user, ShoppingCart.GetItems());
        ShoppingCart.clear();
        NavigationManager.NavigateTo("/thank-you");
    } 


    protected override async Task OnInitializedAsync()
    {
        paymentDetails = new PaymentDetails();
        editContext = new EditContext(paymentDetails);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
        user = UserProvider.GetUserByUsername(username)!;
    }

    private async Task StimulatePayment()
    {
        isPaying = true;
        StateHasChanged();
        await Task.Delay(2000);
        isPaying = false;
        StateHasChanged();
    }

    private string GetFormattedAddress(User user)
    {
        return $"{user.Address}{Environment.NewLine}{user.City}{Environment.NewLine}{user.PostCode}";
    }

    private string GetFormattedName(User user)
    {
        return $"{user.FirstName} {user.LastName}";
    }
}
